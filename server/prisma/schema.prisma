// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Season {
  id				              Int			            @id @default(autoincrement())
  order  			            Int
  name				            String?
  episodeCount            Int			            @default(0)
  filmingStart            DateTime?
  filmingEnd	            DateTime?
  airingStart	            DateTime?
  airingEnd		            DateTime?
  rating			            String?
  whyItsGood              String?
  whyItsBad               String?
  notes				            String?
  episodes				        Episode[]
  tribes				          Tribe[]
  playersOnSeason         PlayerOnSeason[]
  alliances               Alliance[]
  hasFireTokens			      Boolean		          @default(false)
  totalDays               Int                 @default(0)
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Episode {
  id				              Int			            @id @default(autoincrement())
  season				          Season			        @relation(fields: [seasonId], references: [id])
  seasonId				        Int
  order				            Int
  name				            String?
  airingDate			        DateTime
  days                    Int                 @default(0)
  notes				            String?
  premiere				        Boolean
  merge				            Boolean
  final				            Boolean
  playersInEpisode			  PlayerInEpisode[]
  tribalCouncils			    TribalCouncil[]
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Tribe {
  id				              Int			            @id @default(autoincrement())
  name				            String
  category				        String
  color                   String?
  season				          Season			        @relation(fields: [seasonId], references: [id])
  seasonId				        Int
  playersInEpisode			  PlayerInEpisode[]
  tribalCouncils			    TribalCouncil[]
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Player {
  id				              Int			            @id @default(autoincrement())
  name				            String
  nickname				        String?
  birthday				        DateTime
  hometown                String?
  notes				            String?
  playerInEpisodes			  PlayerInEpisode[]
  playerOnSeasons			    PlayerOnSeason[]
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model PlayerOnSeason {
  player				          Player			        @relation(fields: [playerId], references: [id])
  playerId				        Int
  season				          Season			        @relation(fields: [seasonId], references: [id])
  seasonId				        Int
  headshot				        String?
  occupation			        String?
  bornLocation			      String?
  residenceLocation		    String?
  notes				            String?
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt

  @@id([playerId, seasonId])
}

model TribalCouncil {
  id				              Int			            @id @default(autoincrement())
  episode				          Episode		          @relation(fields: [episodeId], references: [id])
  episodeId			          Int
  tribes				          Tribe[]
  votes				            Vote[]
  notes				            String?
  final                   Boolean?
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Vote {
  id                      Int                 @id @default(autoincrement())
  tribalCouncilId			    Int
  tribalCouncil			      TribalCouncil		    @relation(fields: [tribalCouncilId], references: [id])
  voter				            PlayerInEpisode	    @relation("CastVotes", fields: [voterId], references: [id])
  voterId				          Int
  votedFor				        PlayerInEpisode?	  @relation("ReceivedVotes", fields: [votedForId], references: [id])
  votedForId			        Int?
  doesNotCount			      Boolean
  didNotVote			        Boolean
  // ["vote", "shotInTheDark", "extraVote", "revote"]
  category			          String			        @default("vote")
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Elimination {
  id				              Int			            @id @default(autoincrement())
  order                   Int                 @default(0)
  onDay                   Int                 @default(0)
  playerInEpisode			    PlayerInEpisode	    @relation(fields: [playerInEpisodeId], references: [id])
  playerInEpisodeId		    Int			            @unique
  // ["votedOut", "rockDraw", "fireMaking", "quit", "medevac", "redemption", "edge", "ejection", "redemptionDual", "edgeChallenge"]
  category				        String			        @default("votedOut")
  notes				            String?
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model PlayerInEpisode {
  id				              Int			            @id @default(autoincrement())
  player				          Player			        @relation(fields: [playerId], references: [id])
  playerId				        Int
  episode				          Episode		          @relation(fields: [episodeId], references: [id])
  episodeId			          Int
  // ["playing", "eliminated", "redemption", "edge"]
  status				          String			        @default("playing")
  castVotes			          Vote[]			        @relation("CastVotes")
  receivedVotes		        Vote[]			        @relation("ReceivedVotes")
  tribe				            Tribe?			        @relation(fields: [tribeId], references: [id])
  tribeId				          Int?
  elimination			        Elimination?
  advantages			        Advantage[]
  alliances			          Alliance[]
  advantagePlays	        AdvantageEvent[]
  shotInTheDark		        Boolean
  fireTokens			        Int			            @default(0)
  notes				            String?
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Advantage {
  id				              Int			            @id @default(autoincrement())
  name				            String
  description			        String
  playersInEpisodes		    PlayerInEpisode[]
  plays				            AdvantageEvent[]
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model AdvantageEvent {
  id				              Int			            @id @default(autoincrement())
  playerInEpisode			    PlayerInEpisode	    @relation(fields: [playerInEpisodeId], references: [id])
  playerInEpisodeId		    Int
  advantage			          Advantage		        @relation(fields: [advantageId], references: [id])
  advantageId			        Int
  // ["obtained", "played", "transferred", "lost", "expired"]
  category				        String			        @default("played")
  notes				            String?
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}

model Alliance {
  id				              Int			            @id @default(autoincrement())
  season                  Season              @relation(fields: [seasonId], references: [id])
  seasonId                Int
  alliancePlayers			    PlayerInEpisode[]
  name				            String?
  color                   String
  notes				            String?
  createdAt			          DateTime		        @default(now())
  updatedAt			          DateTime		        @updatedAt
}
